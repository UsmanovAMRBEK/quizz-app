{"version":3,"sources":["components/question/Question.js","components/answer/Answer.js","components/QuizMain.js","App.js","serviceWorker.js","index.js"],"names":["Question","props","react_default","a","createElement","question","Answer","answers","Object","keys","answer","map","qAnswer","i","className","correctAnswer","clickedAnswer","onClick","checkAnswer","key","Fragment","disabled","Quiz","state","quiestions","1","2","3","4","correctAnswers","step","score","_this$state","_this","setState","nextStep","_this2","this","_this$state2","length","components_question_Question","components_answer_Answer","Component","App","QuizMain_Quiz","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.494988fe.chunk.js","sourcesContent":["import React from 'react';\nimport './Question.css';\n\nconst Question = (props) => {\n    return (\n        <h1>{props.question}</h1>\n    );\n}\n\nexport default Question;","import React from 'react';\nimport './Answer.css';\n\nconst Answer = (props) => {\n    let answers = Object.keys(props.answer)\n        .map((qAnswer, i) => (\n            <li\n            className=\n            {\n                props.correctAnswer === qAnswer ?\n                'correct' : \n                props.clickedAnswer === qAnswer ? \n                'incorrect' : ''\n            }\n            onClick={() => props.checkAnswer(qAnswer)}\n            key={qAnswer}>\n                {props.answer[qAnswer]}\n            </li>\n        ));\n\n        return (\n            <>\n                <ul disabled={props.clickedAnswer ? true : false} className=\"Answers\">\n                    {answers}\n                </ul>\n                <div>\n                    {\n                        props.correctAnswer ?\n                        'Correct Answer!' : \n                        props.clickedAnswer ? 'Incorrect Answer!' : ''\n                    }\n                </div>\n            </>\n        );\n}\n\nexport default Answer;","import React, {Component} from 'react';\nimport Question from './question/Question';\nimport Answer from './answer/Answer';\nimport './QuizMain.css';\n\nexport default class Quiz extends Component {\n\n    // initiating the local state\n    state = {\n        quiestions: {\n            1: 'Virtual tarmoq hosil qilib beruvchi dasturlarni ko`rsating.',\n            2: 'ISO Open Systems Interconnection (OSI) modeli qachon ishlab chiqilgan?',\n            3: 'Kompyuter tarmoq topologiyasi keltirilgan bandni belgilang.',\n            4: '120000 namuna/sek * 7 bit/namuna = ...... ?'\n        },\n        answers: {\n            1: {\n                1: 'VMware NSX, Cisco ACI, Cisco Enterprise Network Functions Virtualization, Masergy, Cisco Elastic Services Controller, Sangfor aBOS',\n                2: 'VMware NSX, Cisco ACI, VMware, Masergy, AWS Network, Sangfor aBOS',\n                3: 'VMware NSX, Cisco ACI, GoogleCloud Cisco Elastic Services Controller, Azure Bastion',\n                4: 'Arista Converged Cloud Fabric (CCF), Masergy, Cisco Elastic Services Controller, Sangfor aBOS, Azure Net'\n            },\n            2: {\n                1: '1980-yil',\n                2: '1970-yil',\n                3: '1984-yil',\n                4: '1990-yil'\n            },\n            3: {\n                1: 'Aralash, Chiziqli, Doiraviy, Daraxtsimon, Shinali',\n                2: 'Shinali, Yulduzsimon, Halqasimon, Daraxtsimon, Aralash',\n                3: 'Chiziqli, Daraxtsimon, Aralash',\n                4: 'Shinali, Daraxtsimon, Halqasimon, Aralash'\n            },\n            4: {\n                1: '84 Mbit/s',\n                2: '84 Kbit/s',\n                3: '840 Bit/s',\n                4: '840 Kbit/s'\n            }\n        },\n        correctAnswers: {\n            1: '1',\n            2: '3',\n            3: '2',\n            4: '4',\n        },\n        correctAnswer: 0,\n        clickedAnswer: 0,\n        step: 1,\n        score: 0\n    }\n\n    // the method that checks the correct answer\n    checkAnswer = answer => {\n        const { correctAnswers, step, score } = this.state;\n        if(answer === correctAnswers[step]){\n            this.setState({\n                score: score + 1,\n                correctAnswer: correctAnswers[step],\n                clickedAnswer: answer\n            });\n        }else{\n            this.setState({\n                correctAnswer: 0,\n                clickedAnswer: answer\n            });\n        }\n    }\n\n    // method to move to the next question\n    nextStep = (step) => {\n        this.setState({\n            step: step + 1,\n            correctAnswer: 0,\n            clickedAnswer: 0\n        });\n    }\n\n    render(){\n        let { quiestions, answers, correctAnswer, clickedAnswer, step, score } = this.state;\n        return(\n            <div className=\"Content\">\n                {step <= Object.keys(quiestions).length ? \n                    (<>\n                        <Question\n                            question={quiestions[step]}\n                        />\n                        <Answer\n                            answer={answers[step]}\n                            step={step}\n                            checkAnswer={this.checkAnswer}\n                            correctAnswer={correctAnswer}\n                            clickedAnswer={clickedAnswer}\n                        />\n                        <button\n                        className=\"NextStep\"\n                        disabled={\n                            clickedAnswer && Object.keys(quiestions).length >= step\n                            ? false : true\n                        }\n                        onClick={() => this.nextStep(step)}>Next</button>\n                    </>) : (\n                        <div className=\"finalPage\">\n                            <h1>You have completed the quiz!</h1>\n                            <p>Your score is: {score} of {Object.keys(quiestions).length}</p>\n                            <p>Thank you!</p>\n                        </div>\n                    )\n                }\n            </div>\n        );\n    }\n}","import React from 'react';\nimport './App.css';\nimport Quiz from './components/QuizMain';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Quiz />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}